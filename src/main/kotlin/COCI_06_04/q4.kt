package COCI_06_04

import java.io.File

/** 예제
 * 10 1
 * 2 1 3 4 5 6 7 8 9 10
 * 1 3 2 4 5 6 7 8 9 10
 * 1 2 4 3 5 6 7 8 9 10
 * 1 2 3 5 4 6 7 8 9 10
 * 1 2 3 4 6 5 7 8 9 10
 * 1 2 3 4 5 7 6 8 9 10
 * 1 2 3 4 5 6 8 7 9 10
 * 1 2 3 4 5 6 7 9 8 10
 * 1 2 3 4 5 6 7 8 10 9
 * = 9
 *
 * 4 3          1,2,3,4
 * 1  3 3
 * 2  3 2
 * 3  3 1
 * 4  3 0
 *
 * f(4,3) = f(3,3) + f(3,2) + f(3,1) + f(3,0)
 * f(3,3) = f(2,3) + f(2,2) + f(2,1) + f(2,0)
 *
 *
 * f(1,0) = 1
 * f(2,0), f(2,1) , f(2,2)
 * f(3,0), f(3,1) , f(3,2), f(3,3)
 * ...
 * f(n,0) , f(n,1) .... f(n, n*(n-1)/2)
 *
 * f(n,c)
 *
 * n
 * n-1 + n-2 + ... 1
 *
 * 4321 3 + 2+ 1
 *
 * f(4,3) = c * f(1,0)
 * 1 4 3 2
 * 2 4 1 3
 * 2 3 4 1
 * 3 2 1 4
 * 3 1 4 2
 * 4 1 2 3
 * = 6
 *
 *
 * 4 4 의 경우
 *
 * 2, 4, 3, 1 -> 4
 * 4, 1, 3, 2 -> 4
 * 4, 2, 1, 3 -> 4
 * 4, 2, 3, 1 -> 4
 *
 *
 * 3, 1, 2, 4, 5 = 2
 * 3, 1, 2, 5, 4 = 3
 * 3, 1, 4, 2, 5 = 3
 * 3, 1, 4, 5, 2 = 3
 * 3, 1, 5, 2, 4 = 4
 * 3, 1, 5, 4, 2 = 5
 * 3, 2, 1, 4, 5 = 3
 * 3, 2, 1, 5, 4 = 4
 * 3, 2, 4, 1, 5 = 3
 * 3, 2, 4, 5, 1 = 5
 * 3, 2, 5, 1, 4 = 4
 * 3, 2, 5, 4, 1 = 6
 * 3, 4, 1, 2, 5 = 4
 * 3, 4, 1, 5, 2 = 5
 * 3, 4, 2, 1, 5 = 5
 * 3, 4, 2, 5, 1 = 5
 * 3, 4, 5, 1, 2 = 6
 * 3, 4, 5, 2, 1 = 6
 * 3, 5, 1, 2, 4 = 5
 * 3, 5, 1, 4, 2 = 6
 * 3, 5, 2, 1, 4 = 6
 * 3, 5, 2, 4, 1 = 7
 * 3, 5, 4, 1, 2 = 7
 * 3, 5, 4, 2, 1 = 8
 *
 *
 *
 * f(n, c) = f(n-1, c) + f(n-1, c-1) + f(n-1, c-2) + ... + f(n-1, 0)
 * ==================================================================
 * f(n-1, c) = f(n-2, c) + f(n-2, c-1) + f(n-2, c-2) + f(n-2, c-3) + ... + f(n-2, 1) + f(n-2, 0)
 * f(n-1, c-1) =           f(n-2, c-1) + f(n-2, c-2) + f(n-2, c-3) + ... + f(n-2, 1) + f(n-2, 0)
 *                          ...
 * f(n-1, 1) =                                                             f(n-2, 1) + f(n-2, 0)
 * f(n-1, 0) =                                                                         f(n-2, 0)
 * ===================================================================
 * f(n, c) = f(n-2, c) + 2f(n-2, c-1) + 3f(n-2, c-2) + 4f(n-2, c-3) + ... + (c)f(n-2, 1) + (c+1)f(n-2, 0)
 *         = f(n-2, c) + 2f(n-2, c-1) + 3f(n-2, c-2) + 4f(n-2, c-3) + ... + (c)f(n-2, 1) + c + 1    ( because : f(x, 0) = 1 at x >= 1 )
 * ===================================================================
 * f(n-2, c) = f(n-3, c) + f(n-3, c-1) + f(n-3, c-2) + f(n-3, c-3) + f(n-3, c-4) + ... + f(n-3, 1) + f(n-3, 0)
 * f(n-2, c-1) =           f(n-3, c-1) + f(n-3, c-2) + f(n-3, c-3) + f(n-3, c-4) + ... + f(n-3, 1) + f(n-3, 0)
 *                           ...
 * f(n-2, 1)   =                                                                         f(n-3, 1) + f(n-3, 0)
 * =====================================================================
 * f(n, c) = f(n-3, c-2) + 2*2f(n-3, c-3) + 3*3f(n-3, c-4) + ... + (c-2)(c-2)f(n-3, 1) + (c-1)(c-1)f(n-3, 0) + c + 1
 *         = f(n-3, c-2) + 2*2f(n-3, c-3) + 3*3f(n-3, c-4) + ... + (c-2)(c-2)f(n-3, 1) + (c-1)(c-1) + c + 1
 * =====================================================================
 * f(n-3, c-2) = f(n-4, c-3) + f(n-4, c-4) + f(n-4, c-5) + ... + f(n-4, 1) + f(n-4, 0)
 * f(n-3, c-3) = f(n-4, c-4) + f(n-4, c-5) + f(n-4, c-6) + ... + f(n-4, 1) + f(n-4, 0)
 *                              ...
 * f(n-3, 1) = f(n-4, 0)
 * ======================================================================
 * f(n, c) = f(n-4, c-3) + 2*2*2f(n-4, c-4) + 3*3*3f(n-4, c-5) + ... + (c-3)(c-3)(c-3)f(n-4, 1) + (c-2)(c-2)(c-2)f(n-4, 0) + (c-1)(c-1) + c + 1
 *         = f(n-4, c-3) + 2*2*2f(n-4, c-4) + 3*3*3f(n-4, c-5) + ... + (c-3)(c-3)(c-3)f(n-4, 1) + (c-2)^3 + (c-1)^2 + c^1 + 1^0
 * =======================================================================
 * f(n, c) = f(n-1, 0) + cf(n-2, 0) + (c-1)^2f(n-3, 0) + (c-2)^3f(n-4, 0) + ... + (c-
 * =======================================================================
 *
 *
 * f(10, 1) = f(9, 1) + f(9, 0)
 * ============================
 * f(9, 1) = f(8, 1) + f(8, 0)
 * ============================
 * f(10, 1) = f(9, 0) + 1f(8,0) + 1^2f(7,0) + ... + 1^8f(1,0)
 * f(4, 3) = f(3, 0) + 3*f(2, 0) + 2^2f(1,0) = 1 + 3 + 4
 *
 *
 * f(4,3) = f(3,3) + f(3,2) + f(3,1) + f(3,0)
 * f(3,3) = f(2,3) + f(2,2) + f(2,1) + f(2,0)
 *
 *
 *
 * n-1 n-2 n-3 ... 1
 * 1 2 3 ...     n-1
 * n(n-1)/2
 *
 */

fun q4(){
    /** 파일에서 input 읽어오기 */
    val path = "src/main/resources/COCI_06_04/q4_input.txt"
    val file = File(path)
    val stringBuilder = StringBuilder()
    try {
        file.forEachLine {
            stringBuilder.append(it)
            stringBuilder.append("\n") // 각 줄 끝에 줄바꿈 문자 추가
        }
    } catch (e: Exception) {
        println("파일을 읽는 도중 오류가 발생했습니다: ${e.message}")
    }
    val input = stringBuilder.toString()
    /** 입력에서 input 읽어오기 */
//    val bf = BufferedReader(InputStreamReader(System.`in`))
//    val input = bf.readText().trim()

    val (N, C) = input.trim().split(" ")
        .map{ it.toIntOrNull() ?: error("int casting fail") }
        .also{
            if(it[0] < 0 || it[0] > 1000) error("N is out of range")
            if(it[1] < 0 || it[1] > 10000) error("C is out of range")
        }

    val map = Array(N+1){ LongArray(C+1){0} }

    val queue = mutableListOf(N to C)
    var result = 0

    for(n in 1..N){
        for(c in 0..C){
            if(c > n*(n-1)/2) break
            if(c == n*(n-1)/2 || c == 0){ map[n][c] = 1 }
            else{
                var value = 0L
                val last = if(c-(n-1) >= 0) c-(n-1) else 0
                (c downTo last).forEach{
                    value = (value + map[n-1][it]) % 1000000007
                }
                map[n][c] = value
            }
        }
    }

    println(map[N][C] % 1000000007)
//    while(queue.isNotEmpty()){
//        val (n, c) = queue.removeFirst()
//        if(c <= n*(n-1)/2){
//            if(c == n*(n-1)/2 || c == 0) result += 1
//            else{
//                val last = if(c-(n-1) >= 0) c-(n-1) else 0
//                for(i in c downTo last) queue.add(n-1 to i)
//            }
//        }
//    }
//    println(result)
}

/**
 * n = 4
 * 4 3 2 1 = 3 + 2 + 1 = 6
 * n = 4, c = 7
 *
 *
 * f(4,7) = f(3,7) + f(3,6) = f(3,5) + f(3,4)
 * */